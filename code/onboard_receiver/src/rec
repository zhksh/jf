// Dies ist ein Test f체r das ReceiverProgramm
//Wenn am Pin 2 ein Signal empfangen wird, werden die Tauchzellen in Gang gesetzt,
//Wenn kein Signal empfangen wird, fahren die Tauchzellen zur체ck.



#include <stdbool.h>
#include <RCSwitch.h>

#define RECEIVER_PIN 0     // entspircht pin 2
#define PREFIX 0xfe000000  //prefix f체r empfang der nachricht
#define PREFIX_MASK 0x00ffffff

#define TAUCHZELLEENA 5
#define TAUCHZELLEIN1 6
#define TAUCHZELLEIN2 7
#define TAUCHZELLEIN3 8
#define TAUCHZELLEIN4 9
#define TAUCHZELLEENB 10
#define TAUCHZELLENGESCHWINDIGKEIT 110

#define TAUCHZELLENSTOPP1 12
#define TAUCHZELLENSTOPP2 13

#define TESTPIN 2

bool tauchzellenstopp1;
bool tauchzellenstopp2;
bool tauchzelleausgefahren;
int EINFAHRZEIT = 10000;

int pin = 1;
int pin1;

int baud = 9600;
int schalter1;
int schalter2;
int joystick1oben;
int joystick1unten;
int joystick1rechts;
int joystick1links;
int joystick2oben;
int joystick2unten;
int joystick2rechts;
int joystick2links;

RCSwitch mySwitch = RCSwitch();

void setup() {
  pinMode(TESTPIN, INPUT_PULLUP);
  Serial.begin(baud);
  Serial.println("Receiver setup");
  mySwitch.enableReceive(RECEIVER_PIN);
  tauchzellenstopp1 = false;
  tauchzellenstopp2 = false;
  tauchzelleausgefahren = false;

}


long decode(long msg) {
  //this conversion cuts off the highest two bytes
  return msg & PREFIX_MASK;
}

// void prinbin(RCSwitch s){
//   const char* b = dec2binWzerofill(s.getReceivedValue(), s.getReceivedBitlength());

//    Serial.print("Bit) Binary: ");
//    Serial.print( b );
// }
bool checkPrefix(unsigned long original_msg, int decoded) {
  bool passed = (decoded | PREFIX) == original_msg;
  // Serial.print("msg");
  // Serial.print(original_msg);

  return passed;
}




void loop() {


  /* Der ganze ReceiverCode wird ausgeblendet

    if (mySwitch.available()) {  // Wenn ein Code Empfangen wird...


      unsigned long msg = mySwitch.getReceivedValue();
      long code = decode(msg);
      // Serial.print("msg width:");
      // Serial.println(sizeof(code));

      bool legit = checkPrefix(msg, code);
      if (legit) {
        // Serial.print("Code: ");
        // Serial.println(code);
        if (code == 1) {
          digitalWrite(pin1, HIGH);
        }

        schalter1 = code & 1;
        schalter2 = (code << 1) & 1;
        joystick1oben = (code << 2) & 1;
        joystick1unten = (code << 3) & 1;
        joystick1rechts = (code << 4) & 1;
        joystick1links = (code << 5) & 1;
        joystick2oben = (code << 6) & 1;
        joystick2unten = (code << 7) & 1;
        joystick2rechts = (code << 8) & 1;
        joystick2links = (code << 9) & 1;



  */


  //Auslesen der Tauchzellensensoren:

  if (digitalRead(TAUCHZELLENSTOPP1) == 1)
    tauchzellenstopp1 = true;
  if (digitalRead(TAUCHZELLENSTOPP2) == 1)
    tauchzellenstopp2 = true;

  /*statt dem schalter1, der normalerweise vom Sender empfangen wird, wird jetzt der Testpin
    verwendet. Ist der Testpin an, soll die Tauchzelle anfahren.*/
  schalter1 = digitalRead(TESTPIN);

  if (schalter1 = HIGH) {
    digitalWrite(TAUCHZELLEIN1, HIGH);
    if (tauchzellenstopp1)
      digitalWrite(TAUCHZELLEIN2, HIGH);  // tauchzelle ausschalten
    tauchzelleausgefahren = true;   //tauchzelle wird als ausgefahren gemeldet
  }

  else
    digitalWrite(TAUCHZELLEIN2, LOW);  //tauczelle anschalten

  if (schalter1 = LOW) {

    if (tauchzelleausgefahren)
    { digitalWrite(TAUCHZELLEIN1, LOW);
      digitalWrite(TAUCHZELLEIN2, HIGH);

    }




    /*Zweite Tauchzelle wird noch nicht getestet:

      digitalWrite(TAUCHZELLEIN3, schalter2);
      if (tauchzellenstopp2)
      digitalWrite(TAUCHZELLEIN4, schalter2);  //tauchzelle ausschalten
      else
      digitalWrite(TAUCHZELLEIN4, 1 - schalter1);

    */

    analogWrite(TAUCHZELLEENA, TAUCHZELLENGESCHWINDIGKEIT);
    analogWrite(TAUCHZELLEENB, TAUCHZELLENGESCHWINDIGKEIT);

    Serial.print(schalter1);


    /* } else {
       //Serial.print("Noise: ");
       //Serial.println(code);
      }*/


    mySwitch.resetAvailable();  // Hier wird der Empf채nger "resettet"
  }
}
